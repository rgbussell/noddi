#!/usr/bin/python

#Script for testing AMICO implemention of NODDI
# Example: noddiAmicoScript Study01 Subject01
# This script requires AMICO NODDI installation with lots of libraries
# and some compiled c-code beyond the usual afni/fsl installation.
# History
# 160122 Written by rgb 
# 160226 added inputs at time of call to specify input data dir

import sys
StudyID=sys.argv[1]; #something like "Study01" -- input data dir
SubjectID=sys.argv[2]; #something like "Subject01" -- input data dir
SubjectDir=StudyID+"/"+SubjectID+"/";
print 'SubjectDir is ', SubjectDir;
import amico;
amico.core.setup(); # only need this once -- sets up some rot matrices in ~/.dipy

#Load data
#ae=amico.Evaluation("Study01", "Subject01");
ae=amico.Evaluation(StudyID, SubjectID);

#Write the scheme file
amico.util.fsl2scheme(SubjectDir+"NODDI_protocol.bval", SubjectDir+"NODDI_protocol.bvec")

#Load data
ae.load_data(dwi_filename="NODDI_DWI.img", scheme_filename="NODDI_protocol.scheme", mask_filename="roi_mask.img", b0_thr=0);

ae.set_model("NODDI");
ae.generate_kernels(); # only need to be generated once per gradient scheme

ae.load_kernels(); # Will load pre-computed kernels and resample to scheme
#--- Debugging here - RGB ----
import numpy as np

bvecs = np.loadtxt( SubjectDir+"NODDI_protocol.bvec")
bvals = np.loadtxt( SubjectDir+"NODDI_protocol.bval")

#-----------------------------

ae.fit();

ae.save_results();
